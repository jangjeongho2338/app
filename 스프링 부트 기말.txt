전체적 실습 코드

1.modelAttribute 용도 사용법
    - 메서드 매개 변수 또는 메서드 반환 값을 웹 뷰에 노출되는 명명된 모델 속성에 바인딩 하는 어노테이션
    - 컨트롤러에서 공통적으로 model에 설정할 속성을 지정할때 사용
    - 컨트롤러 내부에 @requestMapping이 적용 안된 별도의 메소드를 만들고 @ModelAttribute 적용
    - 적용 예제 7-23페이지 보기
	- @ModelAttribute("모델_속성_이름")
	- public String 메소드_이름() {
	- ...
	- }
	- @ModelAttribute
	- public void 메소드_이름(Model model) {
	- // model.addAttribute(...);
	- }
2. 리다이렉터 포워드 차이점 동작법등
    - redirect
	- 특징 : HTTP응답 헤더를 이용하여 브라우저가 URL을 이용하도록 함 / 화면 이동을 위해 사용
	- 브라우저 변화 : 브라우저의 URL이 변경됨
	- 데이터 전달 : 데이터 전달이 제한적임
	- 이동 범위 : 도메인이 다른 서버로 이동 가능
    - Forward
	- 특징 : 서버 내에서 제어권 이동 / 서버의 처리 로직을 잘게 나누고 체인으로 처리하는 방법
	- 브라우저 변화 : 브라우저의 URL이 변경되지 않음
	- 데이터 정달 : 데이터를 쉽게 전달가능
	- 이동 범위 : 한 서버 내에서만 이동 가능

3. Initbinder 사용법 메소드 종류 사용법
    - 사용자가 입력한 데이터가 Java Bean 객체의 프로퍼티에 매핑되기 전에 데이터 바인딩하는 방법
    - WebDataBinder 객체를 초기화 하는 메소드와 함께 사용
    - 폼 파라미터 종류
	- setAllowedFields()
	    - 폼 페이지에서 원하지 않는 파라미터가 할당되는 것을 방지하기 위해 데이터 바인딩을 허용하는 폼 파라미터를 설정
	    - 필요한 필드만 허용한다는뜻 보안 강력
	- setDistallowedFields()
	    - 매개변수의 기본값은 none / 폼 페이지에서 파라미터로 바인딩 되기를 원하지 않는 파라미터를 설정
	    - 허용 안대는 필드만 가능 민감한 필드 바인딩 막음

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4. 스프링 시큐리티 뭔지뭐하는건지
    - 스프링 시큐리티
	- 스프링 기반 애플리케이션의 사용자가 정의 가능한 인증 및 접근제어 프레임워크
	- 스프링 기반 애플리케이션을 보호하기 위한 스프링 프레임워크 내에서 거의 표준적으로 사용
	- 사용자 인증과 권한부여(접근제어)등을 효율적으로 구현가능

5. 스프링 시큐리티 설정 방법
    - 스프링 시큐리티 Maven 설정 (pnm.xml)
	- spring-security-web
	    - 필터 및 웹 보안 인프라 관련 라이브러리
	    - 서블릿API 종속성이 있는 스프링 시큐리티 웹 인증 및 URL 기반 접근을 제어할 때 필요
	- spring-security-config
	    - 보안네임 스페이스 구문을 분석
	    - 구성을 위해 스프링 시큐리티 네임스페이스를 사용하는 경우 필요 
    - 스프링 시큐리티 웹 설정(web.xml)
	- 스프링 시큐리티 관련 설정파일 로드
	- 스프링 시큐리티 필터 설정

6. 스프링 시큐리티 태그
    - 스피링 시큐리티 설정 태그(security-context.xml)
	- 접근 권한 및 사용자 권한 제어를 위한 태그로 분류됨
    - 접근 권한 태그
	- 허가된 사용자만 특정 페이지에 접근 가능
	- 인증을 처리하는 로그인 페이지를 호출하거나 로그아웃을 처리하도록 설정
	    - 종류
		- http : 시큐리티의 시작과 끝을 나타내는 데 사용
		- intercept-url : 시큐리티가 감시해야할 URL과 그 URL에 접근 가능한 권한을 정의
		- form-login : 폼-로그인 관련 설정
		- logout : 로그아웃 관련 설정
    - 사용자 권한 태그
	- 인증을 처리하기 위해 사용자 정보를 가져오는데 사용
	    - 종류
		- authentication-manage : 사용자 권한 서비스의 시작과 끝을 나타낼때 사용
		- authentication-provider : 사용자 정보를 인증 요청하는데 사용
		- user-service : 사용자 정보를 가져오는데 사용
		- user : 사용자 정보를 나타내는데 사용

7. 접근 권한 패턴 권한 사용자
    - ROLE은 역할 IS는 조건식
    - ROLE_ADMIN(관리자) 관리하는 사람
    - ROLE_USER (일반 사용자) 로그인 된 사람
    - ROLE_ANONYMOUS (익명의 사용자) 로그인 하지 않은 사용자만
    - ROLE_RESTRICTED (모든 사용자) 모든 사람
    - IS_AUTRENTICATED_FULLY (제한된 사용자) 로그인 된 사람만
    - IS_AUTHENTICATED_ANONYMOUSLY (익명의 사용자) 로그인 하지 않은 사용자만
    - IS_AUTRENTICATED_REMEMBERED (기억된 사용자) 자동 로그인 사용자만
8. 폼 로그인 태그 로그인 페이지를 비롯한 설정법 실행 어케 대는지 로그아웃도
    - form-login 태그
	- 인증되지 않은 사용자가 특정경로에 접근하거나 사용자 인증이 필요 할때 로그인 페이지를 보여주는데 사용
	- login-page : 로그인 페이지 경로
	- login-processing-url : 로그인 요청 처리 경로
	- default-target-url : 로그인 성공하면 이동할 기본 경로
	- always-use-default-target : 로그인 성공 후 이동할 경로를 항상 default-target-url 설정 경로를 사용할지 여부
	- authentication-failure-url : 로그인에 실패하면 이동할 경로 기본값은 /login?error
	- username-parameter : 로그인하는 사용자의 ID 파라미터의 이름
	- password-parameter : 로그인하는 사용자의 비밀번호 파라미터의 이름
    - form-logout 태그
	- delete-cookies : 로그아웃에 성공할 때 삭제할 쿠키 이름을 지정 여러개 일 때 콤마로 구분
	- invalidate-session : 로그아웃 시 세션을 제거할 지 여부 기본 값은 true
	- logout-success-url : 로그아웃에 성공 할 때 이동할 경로를 지정 기본값은 /login?logout
	- logout-url : 로그아웃 요청 처리 경로를 지정
	- success-handler-ref : 로그아웃 성공 후 처리를 제어하기 위해 LogoutSuccessHandler을 지정

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

9. 파일 업로드는 뭐하는거고 처리 방법 개념
    - 파일을 웹 클라이언트(브라우저)에서 서버로 전송하고 서버에서 파일 처리
    - HTTP에서는 파일 업로드를 위해 multipart/form-data 형식의 프로토콜을 사용

10. 자바 서블릿에서 업로드 3.0 6.0 차이점(버전에 대한 문제 바뀐 현상)
    - 3.0이전
	- servlet API에서 파일업로드를 지원하지 않음
	- Apache Commons Fileupload등과 같은 외부 라이브러리를 이용하여 파일 업로드를 처리함
    - 3.0이후
	- servlet API에서 파일업로드 지원
	- servlet API에서 지원하는 Fileupload를 이용하여 기능 구현
    - 6.0
	- Springframework 6.0은 더 이상 Third-party Fileupload기능을 지원하지 않음
	- servlet API에서 지원하는 Fileupload 기능을 사용해야함

11. 파일 업로드 설정 속성(의미)
    - 파일 업로드를 처리할 servlet에 multipart 설정(web.xml)
    - 스프링 애플리케이션에서 파일 업로드 처리
	- 스프링 MVC에서 파일 업로드를 처리하는 Bean설정
	    - servlet-context.xml
	- 스프링 6.0부터는 StandardServletMultipartResolver만 지원
	    - 이전 버전에서는 다양한  MultipartResolver을 지원

12. 파일 업로드 경로 내부 업로드 X 별도 업로드 경로 지정
	- 업로드 파일은 웹 애플리케이션의 경로와 무관한 경로에 저장한다 이유
	- 파일 업로드가 웹 애플리케이션 서비스에 영향을 주지 않도록함
	- 업로드 파일에 대한 접근을 제어함
	- 서버가 분산되었을 때 업로드를 처리하지 않은 다른 서버에서도 파일을 접근 할 수 있도록 지원

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

13. 예외 처리 방법의 종류 설명 우선순위 이해
    - 예외 처리 방법
	- Responsestatus : 예외 처리를 위한 가장 간단한 방법
	- ExceptionHandler : 컨트롤러 안에 요청 처리 메서드에서 발생하는 오류나 예외를 직접 구체화하여 예외 처리를 위한 메소드에 선언하는 어노테이션
	- ControllerAdvice : 여러 컨트롤러에서 발생할 수 있는 예외를 공통적으로 처리하기 위한 클래스에 선언하는 어노테이션
	- 순서 = Controller에 적용된 ExceptionHandler > 공통적으로 적용된 ControllerAdvice > Exception에 적용된 Responsestatus

14. ResponseStatus를 이용한 예외 처리방법
    - ResponseStatus는 메소드 실행중 예외가 발생하면 지정된 HTTP 상태 코드를 웹 브라우저에 전달함
	- @ResponseStatus(value=HttpStatus.NOT_FOUND, reason="문제점 글로 설명") 
	- valur : 코드 명칭, reason : 이유 설명, ?code : 응답에 사용되는 상태 코드

15. ExceptionHandler를 이용한 예외 처리방법
    - ExceptionHandler는 웹 요청에 따라 컨트롤러의 요청 처리 메소드를 실행하는 동안 예외가 발생하면 이를 처리하기 위해 예외 처리 메소드에 사용
    - value / Class<? extends Throwable>[] / @ExceptionHandler가 선언된 메소드가 처리할 예외 클래스 목록
	- ex) @ExceptionHandler(value= {BookIdException.class}) : BookIdException예외가 발생하면 이 메서드에서 예외 처리해라

16. ControllerAdvice 각각의 어노테이션의 범위등
    - annotations : Class<? extends Annotation>[] 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

17. Log4j 구조
    - Logger : 로깅을 위한 기본 사용자 진입점
    - Filter : 로깅 호출 또는 로그 이벤트의 매개변수를 평가하고 파이프라인에서 추가로 처리해야하는지 여부를 결정하는 필터
    - Appender : 특정 대상(콘솔,파일,데이터베이스 등)에 LogEvent를 전달하는 역할
    - Layout : 로그 이벤트를 소비하는대상 (콘솔,파일,데이터베이스 등)의 요구사항을 충족하는 형태로 변환

18. Log4j 설명
    - 산업용 java로깅 프레임워크
    - 다양한 사용 사례에 대한 배포를 지원하는 API, 구현체로 구성댐
    - Apache Software Foundation에서 관리하는 프로젝트
    - 자원 봉사팀에 의해 적극적으로 유지 관리 되고 대규모 커뮤니티의 지원을 받음

19. Log4j 설정 판단 가능
    <Loggers>
	<Root level="INFO" additivity="false">
	    <AppenderRef ref="console"/>
	</Root>
	<Logger name="com.springmvc" level="DEBUG"/>
	<Logger name="org.springframework.core" level="INFO"/>
	<Logger name="org.springframework.beans" level="INFO"/>
	<Logger name="org.springframework.context" level="INFO"/>
	<Logger name="org.springframework.web" level="DEBUG"/>
	<Logger name="org.springframework.security" level="DEBUG"/>
	<Logger name="org.springframework.jdbc" level="DEBUG"/>
    </Loggers>

20. intercepter 뭐하는거고 어느 구간에 개입하고 어떻게 처리하는지
    - 사용자가 URL을 요청하면 컨트롤러의 메소드 호출 전/후에 처리흐름을 가로채 특정 작업을 처리할 수 있음
    - 기능
	- 응답 페이지를 출력하기 전에 서버에서 미리 데이터를 가져오는 기능
	- 폼의 중복 제출을 차단하는 기능
	- 요청이 처리되기 전에 파일을 업로드하는 기능
	- 각 요청에 대한 상세한 내역을 기록하는 기능
	- 유효성을 검사하는 기능
	- 시간별 동작 및 성능의 병목 지점을 검사하는 기능

21. 인터페이스 호출 순서
    - preHandle : 가장 먼저 호출 / 컨트롤러 메서드를 실행하기 직전에 실행 / false를 반환하면 넘어가지 않고 중단댐
    - postHandle : 핸들러 실행 성공 후, 뷰 렌더링 직전에 호출 / 예외가 발생하면 이 메서드는 실행되지 않음
    - afterCompletion : 뷰 렌더링이 끝난 후 호출됨 / 요청이 정상이든 예외가 발생 했든 무조건실행 / 리소스 정리, 로그출력등에 사용

22. 어씽크로넌스 프로넌싱 어떤경우 사용 처리 동작 방법 (동작 방식 차이)
    - 동기화 처리
	- 서비스 비지니스 로직의 처리 시간이 오래 걸릴때 로직의 처리가 완료 될 때 까지 서버의 스레드는 대기 상태가 됨
	- 서버 처리가 오래 걸리는 요청이 많을 경우 서버의 스레드가 모두 점유되어 빨리 응답할 수 있는 요청까지 처리할 수 없음
	- ex) 오래 걸리는 SQL의 실행, 외부 서비스 호출로 인한 지연, 대용량 파일 처리등
	- 한마디로 응답 기다림
    - 비동기 처리
	- 처리 시간이 오래 걸리는 요청에 대해 비동기 처리
	- 비동기 처리를 활성화 하면 서버는 요청 처리 스레드를 풀에 반환아여 다른 요청을 처리 할 수 있도록 함
	- 요청처리가 완료되면 다시 서버로 부터 스레드를 할단 받이 응답을 클라이언트에 전송
	- 한마디로 요청을 보내고 응답을 기다리는 동안 다른 작업 진행가능

23. ThreadLocal 의미 쓰는 이유
    - 스레드 별로 고유한 로컬 변수를 제공
    - get또는 set메서드를 통해 해당 변수에 접근하는 각 스레드가 독립적으로 초기화된 자체 복사본을 가짐
    - 상태를 스레드와 연결하려는 클래스의 비공개 정적 필드로 사용댐

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

24. 메시지 리소드
    - MessageSource
	- 화면에 출력할 메시지를 쉽게 다국어로 표현 가능
	- 언어 별 메시지 코드와 메시지 정의
    - LocaleResolver와 LocaleChangeInterceptor
	-  사용자가 웹 애플리케이션에서 원하는 언어를 자유롭게 선택하거나 변경 가능하도록 지원

25. 메시지 리소스 파일 작성 (8~9)
    - key = value 쌍으로 구성
    - key는 뷰 페이지에서 메시지를 참조하는데 사용
    - 기본 언어의 리소스 파일 > 파일이름_국가.properties형태로 사용 (ko,en.en_UK,ja 앞 2글자 따서 사용)
    - src/main/resources 폴더 위치에 작성 ( ISO-8859-1 인코딩 추천 UTF-8도 가능)

26. 뷰 페이지에 메시지 출력 속성 설명
    - 뷰 페이지에서 메시지 리소스 파일의 메시지 출력
	- <spring:message code="welcome.message" 속성="내용" />
	- 속성 : 내용
	- arguments : 메시지 출력을 위한 인자들 전달
	- argumentSeoarator 인자를 구분할 구분자(기본값 콤마(,))
	- code : 출력할 메시지의 키 지정하지 않으면 text속성에 입력한 값이 출력됨
	- htmlEscape : HTML에서 지원하는 문자열 형식으로 변환 (기본 false)
	- javaScriptEscape : javaScript에서 지원하는 문자열 형식으로 변환 (기본 false)
	- message : 주로 스프링MVC에서 유효성 검사를 거친 오류 메시지를 간단하게 보여줄때 사용함
	- scope : 결과를 변수로 내보낼때 변수가 적용되는 범위 (이 속성은 var가 설정된 경우 유효)
	- text : 주어진 code에 대한 메시지를 찾을 수 없을 때 출력할 기본 텍스트
	- var : 결과를 page, request, session, application 범위에 바인딩 할 때 사용할 변수명 지정하지 않으면 메시지를 직접JSP에 출력

27. LocaleResolver 어케 사용하고 구현체 유형 설명
    - 환경 정보를 이용하여 로케일을 결정하고 저장 할 수 있는 springframework의 인터페이스
	- 코드 예시
	  <beans:bean id="localeResolver" class="org.springframework.web.servlet.i18n.LocaleResolver 구현체">
	  <beans:property name="defaultLocale" value="언어코드" />
    - 구현체 유형 및 설명
	- AcceptHeaderLocaleResolver : 웹 브라우저에 설정된 기본 로케일 정보를 사용 / HTTP 요청의 accept-language 헤더에 지정된 기본 로케일을 사용
	- CookieLocaleResolver : 쿠키를 이용한 로케일 정보를 사용 / 사용자지정 로케일, 표준 시간대 정보를 브라우저 쿠키로 유지
	- SessionLocaleResolver : 세션을 이용한 로케일 정보를 사용 / 사용자 세션에서 locale 속성을 사용하여 지정된 기본 로케일 또는 요청의 accept-header 로케일로 대체함
	- FixedLocaleResolver : 특정 로케일을 지정 / 항상 고정된 기본 로케일을 반환하고 선택적으로 시간대를 반환