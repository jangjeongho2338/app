Lambda란?
 • AWS Lambda:  서버를 직접 관리하지 않고, 코드를 실행할 수 
있게 해주는 서비스
• 서버 필요 없음: EC2 인스턴스처럼 서버 띄우고 관리할 필요X.
 • 초 단위 과금: 실제 코드가 돌아간 시간만 지불
• 자동 확장: 호출이 많아지면 Lambda가 자동으로 인스턴스 확장
• 이벤트 기반 실행: S3 파일 업로드, DynamoDB 변경, API Gateway 호출 등 다양한 이벤트로 동작 가능
• 다양한 언어 지원 : Python, Node.js, Java, Go 등 

다이나모 디비 편집기 생성
INSERT INTO "sgu-202500-user-likes" VALUE { 
    'user_id': 'jihoon07', 
    'product_name': '코카콜라'
};

람다로 다이나모 디비 편집 들여쓰기
import boto3

def lambda_handler(event, context):
    dynamodb = boto3.resource('dynamodb')
    table = dynamodb.Table('sgu-202500-user-likes')

    # 덮어쓰기할 항목
    response = table.put_item(
        Item={
            'user_id': 'jihoon07',
            'product_name': '제로콜라'
        }
    )

    return {
        'statusCode': 200,
        'body': 'PutItem successful!'
    }


1. API GATEWAY 연결
# 람다로 다이나모 저장
import boto3
import json
from datetime import datetime

def lambda_handler(event, context):
    try:
        # 요청 본문 파싱 무조건 들어가야 하는 값
        body = json.loads(event['body'])
        user_id = body['user_id']
        product = body['product']
        timestamp = datetime.now().isoformat()

        # 선택적 필드들 (있으면 저장, 없으면 None) 선택적 값
        reason = body.get('reason')
        brand = body.get('brand')
        price = body.get('price')
        color = body.get('color')

        # 저장할 항목 구성
        item = {
            'user_id': user_id,
            'timestamp': timestamp,
            'product': product
        }

        # 선택 필드가 있는 경우만 추가
        if reason:
            item['reason'] = reason
        if brand:
            item['brand'] = brand
        if price:
            item['price'] = price
        if color:
            item['color'] = color

        # DynamoDB 저장  DynamoDB 리소스를 사용하겠다는 의미 & 테이블 이름
        table = boto3.resource('dynamodb').Table('sgu-202565-3c')
        table.put_item(Item=item)

        return {
            'statusCode': 200,
            'body': json.dumps({
                'message': '저장 완료',
                'user_id': user_id,
                'timestamp': timestamp
            }, ensure_ascii=False)
        }

    except Exception as e:
        return {
            'statusCode': 400,
            'body': json.dumps({'error': str(e)}, ensure_ascii=False)
        }
람다에서 바로 테스트 할때
{
  "body": "{\"user_id\":\"haeri05\",\"product\":\"asd\",\"color\":\"무선 이어폰\",\"reason\":\"무선 이어폰\",\"brand\":\"무선 이어폰\",\"timestamp\":\"2025-05-11T21:00:00\",\"price\":\"무선 이어폰\"}"
}
줄바꿈없이 계속

postman에서 할때
{
    "user_id":"",
    "product" : "",
    "color":"",
    "reason": "",
    "brand": "",
    "timestamp": "",
    "price": ""
  }
-----------------------------------------------------------------------------
람다 /upload시 람다에서 S3로 파일 업로드
import json
import boto3
from datetime import datetime

def lambda_handler(event, context):
    # S3 클라이언트 생성
    s3 = boto3.client('s3')

    # 업로드할 대상 버킷 이름 (유동적)
    bucket_name = 'sgu-202565-s3'

    # 저장되는 s3의 폴더 경로
    prefix = 'uploaded/'

    # 현재 시간을 포맷팅해서 파일 이름에 넣음 (고정 로직)
    now = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')

    # 업로드할 파일 이름 구성
    filename = f'{prefix}hello_{now}.txt' prefix=폴더 경로 now=시간

    # 업로드할 내용 구성 (유동적)
    content = f'Hello Haeri! This file was created at {now}'

    # S3에 파일 업로드
    s3.put_object(
        Bucket=bucket_name,
        Key=filename,
        Body=content.encode('utf-8')
    )

    # 응답 반환 (ALB 등에서 기대하는 포맷)
    return {
        "statusCode": 200,
        "statusDescription": "200 OK",
        "isBase64Encoded": False,
        "headers": {
            "Content-Type": "application/json"
        },
        "body": json.dumps({"message": "업로드 완료"}, ensure_ascii=False)
    }

-----------------------------------------------------------------------------------------------------

파일에 있는 다이나모 디비 람다로 추가하기
s3://sgu-202565-s3/dynamo_data/user_likes_data.json 경로
user_likes_data.json 이름
내용
{
 "user_id": "haeri05",
 "product": "워치",
 "price": 50000,
 "brand": "애플"
 }

s3의 파일 다이나모 디비로 가져오기
import json
import boto3
from datetime import datetime

def lambda_handler(event, context):
    # AWS 서비스(S3, DynamoDB) 클라이언트 및 리소스 생성
    s3 = boto3.client('s3')  # S3 클라이언트 생성
    dynamodb = boto3.resource('dynamodb')  # DynamoDB 리소스 객체 생성
    table = dynamodb.Table('sgu-202565-3c')  # 사용할 DynamoDB 테이블 지정

    # S3에서 가져올 버킷 이름과 객체(Key) 지정
    bucket_name = 'sgu-202565-s3'
    object_key = 'dynamo_data/user_likes_data.json'

    try:
        # S3에서 JSON 파일 가져오기
        response = s3.get_object(Bucket=bucket_name, Key=object_key)

        # 파일 내용 읽고 문자열로 디코딩
        content = response['Body'].read().decode('utf-8')

        # 문자열을 JSON 형식으로 파싱
        data = json.loads(content)

        # 현재 시각 타임스탬프를 ISO 8601 형식으로 추가
        timestamp = datetime.now().isoformat()
        data['timestamp'] = timestamp

        # 파싱된 데이터를 DynamoDB 테이블에 삽입
        table.put_item(Item=data)

        # 성공 응답 반환
        return {
            'statusCode': 200,
            'body': json.dumps({
                'message': 'DynamoDB insert successful!',
                'item': data
            }, ensure_ascii=False)
        }

    except Exception as e:
        # 오류 발생 시 에러 메시지와 함께 500 응답 반환
        return {
            'statusCode': 500,
            'body': json.dumps({
                'error': str(e)
            }, ensure_ascii=False)
        }

S3의 user_id와 product만 가져오기
import json
import boto3
from datetime import datetime

def lambda_handler(event, context):
    # AWS S3 클라이언트 및 DynamoDB 리소스 생성
    s3 = boto3.client('s3')
    dynamodb = boto3.resource('dynamodb')  # DynamoDB 리소스 객체 생성
    table = dynamodb.Table('sgu-202565-3c')  # 사용할 DynamoDB 테이블 지정

    # S3에서 가져올 버킷 이름과 객체(Key) 지정
    bucket_name = 'sgu-202565-s3'
    object_key = 'dynamo_data/user_likes_data.json'

    try:
        # 1. S3에서 JSON 파일 가져오기
        response = s3.get_object(Bucket=bucket_name, Key=object_key)
        content = response['Body'].read().decode('utf-8')
        raw_data = json.loads(content)

        #추출할 데이터
        user_id = raw_data.get('user_id')
        product = raw_data.get('product')

        # 필수 필드 누락 시 오류 반환
        if not user_id or not product:
            return {
                'statusCode': 400,
                'body': '필수 데이터 누락: user_id 또는 product가 없습니다.'
            }

        # 3. DynamoDB에 저장할 항목 구성
        item = {
            'user_id': user_id,
            'timestamp': datetime.now().isoformat(),  # 현재 시각 타임스탬프 추가
            'product': product
        }

        # 4. 항목을 DynamoDB에 삽입
        table.put_item(Item=item)

        # 5. 성공 응답 반환
        return {
            'statusCode': 200,
            'body': json.dumps({
                'message': '선택 필드만 Insert 완료',
                'item': item
            }, ensure_ascii=False)
        }

    except Exception as e:
        # 예외 발생 시 에러 메시지 포함 응답 반환
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)}, ensure_ascii=False)
        }


s3://sgu-202565-s3/dynamo_data/user_likes_data2.json 경로
user_likes_data2.json 이름
[
 {
 "user_id": "haeri01",
 "product": "갤럭시워치",
 "price": 40000,
 "brand": "삼성"
 },
 {
 "user_id": "minji02",
 "product": "아이패드",
 "price": 800000,
 "brand": "애플"
 },
 {
 "user_id": "jihoon03",
 "product": "버즈",
 "price": 120000,
 "brand": "삼성"
 }
]

배열 형식으로 되어 있을 경우
import json
import boto3
from datetime import datetime

def lambda_handler(event, context):
    # AWS S3 클라이언트 및 DynamoDB 리소스 생성
    s3 = boto3.client('s3')
    dynamodb = boto3.resource('dynamodb')  # DynamoDB 리소스 객체 생성
    table = dynamodb.Table('sgu-202565-3c')  # 사용할 DynamoDB 테이블 지정

    # S3에서 가져올 버킷 이름과 객체(Key) 지정
    bucket_name = 'sgu-202565-s3'
    object_key = 'dynamo_data/user_likes_data2.json'

    try:
        # 1. S3에서 파일 읽기
        response = s3.get_object(Bucket=bucket_name, Key=object_key)
        content = response['Body'].read().decode('utf-8')
        data_list = json.loads(content)  # JSON 배열 파싱

        # 2. 각 항목에 대해 반복 처리
        for record in data_list:
            user_id = record.get('user_id')
            product = record.get('product')

            # 필수 필드 누락 시 무시하고 다음 항목으로
            if not user_id or not product:
                print(f"user_id 또는 product 누락: {record}")
                continue

            # 저장할 항목 구성
            item = {
                'user_id': user_id,
                'timestamp': datetime.now().isoformat(),  # 현재 시각
                'product': product
            }

            # DynamoDB에 항목 저장
            table.put_item(Item=item)
            print(f"Inserted: {item}")

        # 모든 레코드 처리 후 성공 응답 반환
        return {
            'statusCode': 200,
            'body': json.dumps('전체 레코드 Insert 완료', ensure_ascii=False)
        }

    except Exception as e:
        # 예외 발생 시 에러 메시지 포함 응답 반환
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)}, ensure_ascii=False)
        }
----------------------------------------------------------------------------------------------------------
클라우드와치 구조
{
 "timestamp": 1716728459247,         // 로그 발생 시각 (Epoch 밀리초)
 "message": "로그 본문 내용",          // 로그 메시지(1줄 문자열)
 "ingestionTime": 1716728460000     // CloudWatch가 수집한 시간
}

클라이드와치 디비 저장
import boto3
import json
from datetime import datetime

def lambda_handler(event, context):
    # CloudWatch Logs 클라이언트 및 DynamoDB 리소스 생성
    logs = boto3.client('logs')
    dynamodb = boto3.resource('dynamodb')
    table = dynamodb.Table('sgu-202565-3c')  # 사용할 DynamoDB 테이블 지정

    log_group = '/aws/lambda/sgu-202565-test'  # 로그 그룹 이름

    try:
        # 1. 가장 최근의 로그 스트림 가져오기
        streams = logs.describe_log_streams(
            logGroupName=log_group,
            orderBy='LastEventTime',
            descending=True,
            limit=1
        )['logStreams']

        # 로그 스트림이 없으면 404 반환
        if not streams:
            return {
                'statusCode': 404,
                'body': 'No log streams found'
            }

        # 가장 최근 로그 스트림 이름 추출
        stream_name = streams[0]['logStreamName']

        # 2. 해당 로그 스트림에서 최근 로그 이벤트 20개 가져오기
        events = logs.get_log_events(
            logGroupName=log_group,
            logStreamName=stream_name,
            limit=20,
            startFromHead=True
        )['events']

        # 3. 로그 이벤트를 하나씩 DynamoDB에 저장
        for e in events:
            # CloudWatch의 timestamp는 ms 단위 → datetime 객체로 변환 후 ISO 포맷으로 변경
            event_time = datetime.fromtimestamp(e['timestamp'] / 1000).isoformat()
            message = e['message'].strip()

            # 저장할 항목 구성
            item = {
                'user_id': 'cloudwatch',  # 고정값
                'timestamp': event_time,  # 로그 발생 시간
                'product': message        # 로그 메시지 내용
            }

            # DynamoDB에 삽입
            table.put_item(Item=item)
            print(f"Inserted: {item}")

        # 모든 로그 저장 후 성공 응답 반환
        return {
            'statusCode': 200,
            'body': json.dumps('CloudWatch 로그 → DynamoDB 저장 완료', ensure_ascii=False)
        }

    except Exception as e:
        # 예외 발생 시 에러 메시지 반환
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)}, ensure_ascii=False)
        }

-----------------------------------------------------------------------------------------------------------

import requests

def lambda_handler(event, context):
    url = "https://httpbin.org/get"
    response = requests.get(url)  # 이 줄이 GET 요청!
    data = response.json()        # 응답 내용을 JSON으로 파싱
    print("API 응답:", data)
    return {
        'statusCode': 200,
        'body': str(data)
    }

import requests
import json

def lambda_handler(event, context):
    url = "https://httpbin.org/post"
    payload = {"name": "test"}   # 내가 보낼 데이터 (JSON 형식)
    response = requests.post(url, json=payload)  # POST 요청!
    data = response.json()
    print("API 응답:", data)
    return {
        'statusCode': 200,
        'body': str(data)
    }


payload = {"name": "test"} // POST 요청 Body에 담아 보낼
JSON 데이터
	• response = requests.post(url, json=payload) 
	• requests.post()로 POST 요청 전송
	• json=payload 
	→payload(딕셔너리)를 JSON 문자열로 자동 직렬화해서 전송
	→HTTP 요청 헤더에Content-Type: application/json도 자동으로 붙여 줌
• data = response.json() // 응답 객체(response)에서 JSON 형식의 응답Body를 파싱해Python 딕셔너리로 변환

->
import requests

def lambda_handler(event, context):
    url = "https://httpbin.org/post"            # 요청 보낼 주소
    payload = {"name": "test"}                   # POST 요청 Body에 담을 데이터 (딕셔너리)
    
    # POST 요청 보내기 (payload를 JSON으로 자동 변환해서 전송)
    response = requests.post(url, json=payload)
    
    # 응답에서 JSON 데이터 파싱 (Python 딕셔너리로 변환)
    data = response.json()
    
    print("API 응답:", data)                      # 응답 내용 출력
    
    return {
        'statusCode': 200,
        'body': str(data)                         # 응답 데이터를 문자열로 변환해 반환
    }








다이나모 디비 첫 입력 값 종류 1개라도 있으면 추가댐
[
  {
    "user_id": { "S": "haeri05" },
    "product_name": { "S": "무선 이어폰" },
    "category": { "S": "디지털" },
    "reason": { "S": "최근 블루투스 기기 검색" },
    "timestamp": { "S": "2025-05-11T21:00:00" },
    "price": { "N": "89000" },
    "brand": { "S": "소니" },
    "color": { "S": "블랙" },
    "rating": { "N": "4.7" }
  },
  {
    "user_id": { "S": "minji01" },
    "product_name": { "S": "핑크 가습기" },
    "category": { "S": "생활가전" },
    "timestamp": { "S": "2025-05-11T21:01:00" }
  },
  {
    "user_id": { "S": "jihoon07" },
    "product_name": { "S": "텀블러" }
  },
  {
    "user_id": { "S": "yuna23" },
    "product_name": { "S": "토끼 인형" },
    "reason": { "S": "장난감 카테고리 체류시간 높음" }
  }
]
